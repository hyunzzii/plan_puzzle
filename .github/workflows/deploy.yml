name: Deploy server

on:
  push:
    branches:
      - "main"
      - "develop"
  pull_request:
    branches:
      - "main"
      - "develop"
  workflow_dispatch:

jobs:
  run_test:
    name: Run test
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout the repo
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'corretto'

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Run tests
        run: ./gradlew test --no-daemon --info

  build_and_push_docker_image:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: run_test
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout the repo
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/plan_puzzle:latest

  deploy:
    name: Deploy to EC2 server
    runs-on: ubuntu-latest
    needs: build_and_push_docker_image
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: read
    steps:
      - name: Checkout the repo
        uses: actions/checkout@v4

      - name: Ssh to EC2 dev server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.AWS_EC2_HOST }}
          username: ${{ secrets.AWS_EC2_USERNAME }}
          key: ${{ secrets.AWS_EC2_PEM_KEY }}
          port: 22
          script: |
            cd /home/ubuntu/workspace
            
            echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
            
            echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" > .env
            echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> .env
            echo "JWT_ACCESS_SECRET=${{ secrets.JWT_ACCESS_SECRET }}" >> .env
            echo "JWT_REFRESH_SECRET=${{ secrets.JWT_REFRESH_SECRET }}" >> .env
            echo "MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}" >> .env
            echo "SPRING_PROFILES_ACTIVE=dev" >> .env
            echo "APP_IMAGE=${{ secrets.APP_IMAGE }}" >> .env
            
            docker-compose down
            docker-compose up -d